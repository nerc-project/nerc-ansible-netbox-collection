---
- name: Create top level directories for Netbox related pods
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0700"
  loop:
    - "{{ netbox_prefix }}"
    - "{{ netbox_postgres_prefix }}"
    - "{{ netbox_redis_prefix }}"
    - "{{ netbox_redis_cache_prefix }}"

- name: Create Postgresql data directory
  ansible.builtin.file:
    state: directory
    owner: 70
    group: 70
    mode: "0755"
    path: "{{ netbox_postgres_prefix }}/data"

- name: Create Redis data directories
  ansible.builtin.file:
    state: directory
    owner: 0
    group: 0
    mode: "0755"
    path: "{{ item }}"
  loop:
    - "{{ netbox_redis_prefix }}/data"
    - "{{ netbox_redis_cache_prefix }}/data"

- name: Create Netbox config and util directores
  ansible.builtin.file:
    state: directory
    owner: 999
    group: 0
    mode: "0755"
    path: "{{ item }}"
  loop:
    - "{{ netbox_prefix }}/config"
    - "{{ netbox_prefix }}/media"
    - "{{ netbox_prefix }}/reports"
    - "{{ netbox_prefix }}/scripts"
    - "{{ netbox_prefix }}/backups"

- name: Install Netbox config files
  ansible.builtin.template:
    src: "netbox-config/{{ item }}.j2"
    dest: "{{ netbox_prefix }}/config/{{ item }}"
    owner: 999
    group: 0
    mode: '0644'
  loop:
    - "extra.py"

- name: Install NGINX unit conifg file
  ansible.builtin.template:
    src: "nginx-unit.json.j2"
    dest: "{{ netbox_prefix }}/nginx-unit.json"
    owner: 999
    group: 0
    mode: '0644'

- name: Install Netbox requirements file
  ansible.builtin.template:
    src: "requirements-container.txt.j2"
    dest: "{{ netbox_prefix }}/requirements-container.txt"
    owner: 999
    group: 0
    mode: '0644'

- name: Set netbox allowed host list
  ansible.builtin.set_fact:
    netbox_allowed_hosts: "{{ inventory_hostname }}"

- name: Update netbox allowed host list if public url set
  ansible.builtin.set_fact:
    netbox_allowed_hosts: "{{ inventory_hostname }} {{ netbox_public_url }}"
  when: netbox_public_url != ""

- name: Install Netbox container runtime env file
  ansible.builtin.template:
    src: "netbox.env-{{ netbox_auth }}.j2"
    dest: "{{ netbox_prefix }}/netbox.env"
    owner: 0
    group: 0
    mode: '0600'
  notify:
    - Restart Netbox

- name: Install Netbox Backup script
  ansible.builtin.template:
    src: "backup.sh.j2"
    dest: "{{ netbox_prefix }}/backup.sh"
    owner: 0
    group: 0
    mode: '0755'

- name: Install s3 config and tools for netbox backups
  ansible.builtin.include_tasks:
    file: "s3.yml"
  when: netbox_s3_bucket_uri != ""

- name: Create Podman network for Netbox
  containers.podman.podman_network:
    name: "{{ netbox_network }}"
    disable_dns: false

- name: Create Podman secrets
  containers.podman.podman_secret:
    state: present
    force: true
    name: "{{ item.name }}"
    data: "{{ item.data }}"
  no_log: true
  with_items:
    - { name: "{{ netbox_name }}_postgres_password",
        data: "{{ vault_netbox_postgres_password }}" }
    - { name: "{{ netbox_name }}_redis_cache_password",
        data: "{{ vault_netbox_redis_cache_password }}" }
    - { name: "{{ netbox_name }}_redis_password",
        data: "{{ vault_netbox_redis_password }}" }
    - { name: "{{ netbox_name }}_secret_key",
        data: "{{ vault_netbox_secret_key }}" }
    - { name: "{{ netbox_name }}_superuser_password",
        data: "{{ vault_obm_pw }}" }
    - { name: "{{ netbox_name }}_api_token",
        data: "{{ vault_netbox_api_token }}" }

- name: Set up Postgresql server
  containers.podman.podman_container:
    name: "{{ netbox_name }}-postgres"
    state: started
    image: docker.io/postgres:16-alpine
    network: "{{ netbox_network }}"
    generate_systemd:
      names: true
      new: true
      path: /etc/systemd/system
    secrets:
      - "{{ netbox_name }}_postgres_password,target=db_password"
    security_opt:
      - 'label=disable'
    env:
      POSTGRES_DB: "netbox"
      POSTGRES_USER: "{{ vault_netbox_postgres_username }}"
      POSTGRES_PASSWORD_FILE: "/run/secrets/db_password"
    volumes:
      - "{{ netbox_postgres_prefix }}/data:/var/lib/postgresql/data:rw"

- name: Restore existing Netbox Postgres DB
  # disabled by default, use with lots of CAUTION
  ansible.builtin.shell: |
    echo "wait for container to start"
    sleep 10
    echo "import DB from a file provided by admin"
    podman exec -i "{{ netbox_name }}-postgres" psql \
        --user netbox < "{{ netbox_postgres_dbrestore }}"
  args:
    executable: bash
  register: dbrestore_output
  changed_when: dbrestore_output
  when: netbox_postgres_dbrestore != ""

- name: Set up Redis server
  containers.podman.podman_container:
    name: "{{ netbox_name }}-redis"
    state: started
    image: docker.io/redis:7-alpine
    network: "{{ netbox_network }}"
    generate_systemd:
      names: true
      new: true
      path: /etc/systemd/system
    secrets:
      - "{{ netbox_name }}_redis_password,target=redis_password"
    env:
      REDIS_PASS_FILE: /run/secrets/redis_password
    security_opt:
      - 'label=disable'
    volumes:
      - "{{ netbox_redis_prefix }}/data:/data:rw"
    command:
      - sh
      - -c
      - redis-server --requirepass "$(cat $REDIS_PASS_FILE)"

- name: Set up Redis cache server
  containers.podman.podman_container:
    name: "{{ netbox_name }}-redis-cache"
    state: started
    image: docker.io/redis:7-alpine
    network: "{{ netbox_network }}"
    generate_systemd:
      names: true
      new: true
      path: /etc/systemd/system
    secrets:
      - "{{ netbox_name }}_redis_cache_password,target=redis_cache_password"
    env:
      REDIS_PASS_FILE: /run/secrets/redis_cache_password
    security_opt:
      - 'label=disable'
    volumes:
      - "{{ netbox_redis_cache_prefix }}/data:/data:rw"
    command:
      - sh
      - -c
      - redis-server --requirepass "$(cat $REDIS_PASS_FILE)"

- name: Create a list of Netbox secrets
  ansible.builtin.set_fact:
    netbox_secrets:
      - "{{ netbox_name }}_postgres_password,target=db_password"
      - "{{ netbox_name }}_redis_password,target=redis_password"
      - "{{ netbox_name }}_redis_cache_password,target=redis_cache_password"
      - "{{ netbox_name }}_secret_key,target=secret_key"
      - "{{ netbox_name }}_superuser_password,target=superuser_password"
      - "{{ netbox_name }}_api_token,target=superuser_api_token"

- name: Create a list of Netbox volume mounts
  ansible.builtin.set_fact:
    netbox_volumes:
      - "{{ netbox_prefix }}/nginx-unit.json:/etc/unit/nginx-unit.json:ro"
      - "{{ netbox_prefix }}/requirements-container.txt:/opt/netbox/requirements-container.txt:ro"
      - "{{ netbox_prefix }}/config/extra.py:/etc/netbox/config/extra.py:ro"
      - "{{ netbox_prefix }}/media:/opt/netbox/netbox/media:rw"
      - "{{ netbox_prefix }}/reports:/opt/netbox/netbox/reports:rw"
      - "{{ netbox_prefix }}/scripts:/opt/netbox/netbox/scripts:rw"

- name: Handle alternate base URL redirects
  when: netbox_basepath and netbox_basepath != "netbox"
  block:

    - name: Create redir directory
      ansible.builtin.file:
        path: '{{ netbox_prefix }}/baseurl_redir'
        owner: 999
        group: 0
        mode: '0755'
        state: directory

    - name: Create static symlink
      ansible.builtin.file:
        src: "/opt/netbox/netbox/static"
        dest: '{{ netbox_prefix }}/baseurl_redir/static'
        owner: 999
        group: 0
        state: link
        force: true
        follow: false

    - name: Update Netbox container mounts
      ansible.builtin.set_fact:
        netbox_volumes: "{{ netbox_volumes + ['{{ netbox_prefix }}/baseurl_redir:/opt/netbox/netbox/{{ netbox_basepath }}:ro'] }}"

- name: Set up Netbox server
  containers.podman.podman_container:
    name: "{{ netbox_name }}"
    state: present
    image: "docker.io/netboxcommunity/netbox:{{ netbox_version }}"
    network: "{{ netbox_network }}"
    generate_systemd:
      names: true
      new: true
      force: true
      path: /etc/systemd/system
    secrets: '{{ netbox_secrets }}'
    security_opt:
      - 'label=disable'
    user: "unit:root"
    publish:
      - "{{ netbox_port }}:8080"
    env_file: "{{ netbox_prefix }}/netbox.env"
    volumes: '{{ netbox_volumes }}'

- name: Set up Netbox rqworker
  containers.podman.podman_container:
    name: "{{ netbox_name }}-rqworker"
    state: present
    image: "docker.io/netboxcommunity/netbox:{{ netbox_version }}"
    network: "{{ netbox_network }}"
    generate_systemd:
      names: true
      new: true
      path: /etc/systemd/system
    secrets: '{{ netbox_secrets }}'
    security_opt:
      - 'label=disable'
    user: "unit:root"
    env_file: "{{ netbox_prefix }}/netbox.env"
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    volumes: '{{ netbox_volumes }}'

- name: Set up Netbox housekeeping scheduled tasks
  containers.podman.podman_container:
    name: "{{ netbox_name }}-housekeeping"
    state: present
    image: "docker.io/netboxcommunity/netbox:{{ netbox_version }}"
    network: "{{ netbox_network }}"
    generate_systemd:
      names: true
      new: true
      path: /etc/systemd/system
    secrets: '{{ netbox_secrets }}'
    security_opt:
      - 'label=disable'
    user: "unit:root"
    env_file: "{{ netbox_prefix }}/netbox.env"
    command:
      - /opt/netbox/housekeeping.sh
    volumes: '{{ netbox_volumes }}'

- name: Enable and start systemd containers
  ansible.builtin.systemd:
    name: "{{ item }}"
    daemon_reload: true
    force: true
    state: started
    enabled: true
  loop:
    - "container-{{ netbox_name }}-postgres"
    - "container-{{ netbox_name }}-redis-cache"
    - "container-{{ netbox_name }}-redis"
    - "container-{{ netbox_name }}"
    - "container-{{ netbox_name }}-rqworker"
    - "container-{{ netbox_name }}-housekeeping"

- name: Create backup cron
  ansible.builtin.cron:
    name: "netbox backup"
    minute: "0"
    hour: "18"
    user: root
    job: "{{ netbox_prefix }}/backup.sh >> {{ netbox_prefix }}/backups.log 2>&1"
